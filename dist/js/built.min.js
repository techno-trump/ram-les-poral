/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
!function() {

;// CONCATENATED MODULE: ./repo/js/libs/logger.js
const onlyErrorsToConsole = true;
const consoleLogs = true;
const consoleDebug = true;
const alertOnError = false;
const alertOnLog = false;
function log() {
  if (!onlyErrorsToConsole) {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (consoleLogs) console.log(...args);
    if (alertOnLog) alert(args.join(" :: "));
  }
}
function debug() {
  if (!onlyErrorsToConsole && consoleDebug) console.debug(...arguments);
}
function error() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  if (!onlyErrorsToConsole && consoleDebug) console.error(...args);
  if (alertOnError) alert(args.join(" :: "));
}
;// CONCATENATED MODULE: ./src/js/pages/built/sliders.js

function initCardsSlider(selector) {
  log("initCardsSlider::selector: ", selector);
  let slider;
  const mediaMatch = matchMedia("(max-width: 575px)");
  const handleMatch = _ref => {
    let {
      matches
    } = _ref;
    if (matches) {
      if (!slider) {
        slider = init();
      }
    } else if (slider && slider.initialized) {
      slider.destroy();
      slider = null;
    }
  };
  mediaMatch.addListener(handleMatch);
  handleMatch(mediaMatch);
  function init() {
    return new Swiper(selector, {
      observer: true,
      resizeObserver: true,
      slidesPerView: 1,
      grabCursor: true,
      autoplay: {
        delay: 5000
      }
    });
  }
}
function initFiltersSlider() {
  new Swiper("#filters-slider", {
    observer: true,
    resizeObserver: true,
    slidesPerView: "auto",
    grabCursor: true,
    spaceBetween: 30
  });
}
function initSliders() {
  initCardsSlider("#projects-slider");
  //initFiltersSlider();
}
;// CONCATENATED MODULE: ./src/js/shared/initCallbackRequestForm.js
function initCallbackRequestForm(formId) {
  let formType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "callback";
  // or "loan"
  const $form = $("#".concat(formId));
  const validator = $form.validate({
    ignore: [],
    highlight: function (element, errorClass, validClass) {
      $(element).closest(".form-field").addClass(errorClass);
    },
    unhighlight: function (element, errorClass, validClass) {
      $(element).closest(".form-field").removeClass(errorClass);
    },
    errorPlacement: function (error, element) {
      error.appendTo(element.closest(".form-field"));
    }
    // Отправляем данные на сервер
    // submitHandler: async function(form, event) {
    // 	event.preventDefault();
    // 	drawers.open("successful-callback-request");
    // const formData = new FormData(form);
    // const response = await fetch(``, {
    // 	method: "POST",
    // 	body: formData,
    // 	redirect: 'follow'
    // });
    // if (response.ok) {
    // 	drawers.open("successful-callback-request");
    // } else {
    // 	console.error("Ошибка при отпрвке/обработке формы запороса обратного звонка: status::" + response.status + ", statusText::" + response.statusText);
    // }
    //}
  });

  const $telInputElem = $form.find("input[name='tel']");
  const cleave = new Cleave($telInputElem.get(0), {
    numericOnly: true,
    blocks: [2, 3, 3, 2, 2],
    delimiters: [" (", ") ", "-", "-"],
    prefix: "+7",
    noImmediatePrefix: true
  });
  return validator;
}
;// CONCATENATED MODULE: ./src/js/pages/built/index.js



window.addEventListener("DOMContentLoaded", onLoaded);
function onLoaded() {
  initSliders();
  initCallbackRequestForm("loan-callback-request-form", "loan");
}
}();
// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
!function() {
// extracted by mini-css-extract-plugin

}();
/******/ })()
;